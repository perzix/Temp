// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PMapInfo.proto

#include "PMapInfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace protobuf {
PROTOBUF_CONSTEXPR PColor::PColor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/0u
  , /*decltype(_impl_.g_)*/0u
  , /*decltype(_impl_.b_)*/0u
  , /*decltype(_impl_.a_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PColorDefaultTypeInternal() {}
  union {
    PColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PColorDefaultTypeInternal _PColor_default_instance_;
PROTOBUF_CONSTEXPR PTileIndex::PTileIndex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PTileIndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PTileIndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PTileIndexDefaultTypeInternal() {}
  union {
    PTileIndex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PTileIndexDefaultTypeInternal _PTileIndex_default_instance_;
PROTOBUF_CONSTEXPR PTileInfo::PTileInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tileindex_)*/nullptr
  , /*decltype(_impl_.sectorid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PTileInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PTileInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PTileInfoDefaultTypeInternal() {}
  union {
    PTileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PTileInfoDefaultTypeInternal _PTileInfo_default_instance_;
PROTOBUF_CONSTEXPR PSectorInfo::PSectorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sectorid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PSectorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PSectorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PSectorInfoDefaultTypeInternal() {}
  union {
    PSectorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PSectorInfoDefaultTypeInternal _PSectorInfo_default_instance_;
PROTOBUF_CONSTEXPR PMapInfo::PMapInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tileinfos_)*/{}
  , /*decltype(_impl_.worldmapsize_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PMapInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMapInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMapInfoDefaultTypeInternal() {}
  union {
    PMapInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMapInfoDefaultTypeInternal _PMapInfo_default_instance_;
}  // namespace protobuf
}  // namespace google
static ::_pb::Metadata file_level_metadata_PMapInfo_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_PMapInfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_PMapInfo_2eproto = nullptr;

const uint32_t TableStruct_PMapInfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PColor, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PColor, _impl_.g_),
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PColor, _impl_.b_),
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PColor, _impl_.a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PTileIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PTileIndex, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PTileIndex, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PTileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PTileInfo, _impl_.tileindex_),
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PTileInfo, _impl_.sectorid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PSectorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PSectorInfo, _impl_.sectorid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PMapInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PMapInfo, _impl_.worldmapsize_),
  PROTOBUF_FIELD_OFFSET(::google::protobuf::PMapInfo, _impl_.tileinfos_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::protobuf::PColor)},
  { 10, -1, -1, sizeof(::google::protobuf::PTileIndex)},
  { 18, -1, -1, sizeof(::google::protobuf::PTileInfo)},
  { 26, -1, -1, sizeof(::google::protobuf::PSectorInfo)},
  { 33, -1, -1, sizeof(::google::protobuf::PMapInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::google::protobuf::_PColor_default_instance_._instance,
  &::google::protobuf::_PTileIndex_default_instance_._instance,
  &::google::protobuf::_PTileInfo_default_instance_._instance,
  &::google::protobuf::_PSectorInfo_default_instance_._instance,
  &::google::protobuf::_PMapInfo_default_instance_._instance,
};

const char descriptor_table_protodef_PMapInfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016PMapInfo.proto\022\017google.protobuf\"4\n\006PCo"
  "lor\022\t\n\001r\030\001 \001(\r\022\t\n\001g\030\002 \001(\r\022\t\n\001b\030\003 \001(\r\022\t\n\001"
  "a\030\004 \001(\r\"\"\n\nPTileIndex\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 "
  "\001(\005\"M\n\tPTileInfo\022.\n\ttileindex\030\001 \001(\0132\033.go"
  "ogle.protobuf.PTileIndex\022\020\n\010sectorid\030\002 \001"
  "(\005\"\037\n\013PSectorInfo\022\020\n\010sectorid\030\001 \001(\005\"O\n\010P"
  "MapInfo\022\024\n\014worldmapsize\030\001 \001(\005\022-\n\ttileinf"
  "os\030\002 \003(\0132\032.google.protobuf.PTileInfoB}\n\023"
  "com.google.protobufB\nEmptyProtoP\001Z.googl"
  "e.golang.org/protobuf/types/known/emptyp"
  "b\370\001\001\242\002\003GPB\252\002\036Google.Protobuf.WellKnownTy"
  "pesb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_PMapInfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_PMapInfo_2eproto = {
    false, false, 451, descriptor_table_protodef_PMapInfo_2eproto,
    "PMapInfo.proto",
    &descriptor_table_PMapInfo_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_PMapInfo_2eproto::offsets,
    file_level_metadata_PMapInfo_2eproto, file_level_enum_descriptors_PMapInfo_2eproto,
    file_level_service_descriptors_PMapInfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_PMapInfo_2eproto_getter() {
  return &descriptor_table_PMapInfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_PMapInfo_2eproto(&descriptor_table_PMapInfo_2eproto);
namespace google {
namespace protobuf {

// ===================================================================

class PColor::_Internal {
 public:
};

PColor::PColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.protobuf.PColor)
}
PColor::PColor(const PColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PColor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){}
    , decltype(_impl_.g_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.a_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  // @@protoc_insertion_point(copy_constructor:google.protobuf.PColor)
}

inline void PColor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){0u}
    , decltype(_impl_.g_){0u}
    , decltype(_impl_.b_){0u}
    , decltype(_impl_.a_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PColor::~PColor() {
  // @@protoc_insertion_point(destructor:google.protobuf.PColor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PColor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PColor::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.PColor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PColor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PColor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.PColor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 r = 1;
  if (this->_internal_r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_r(), target);
  }

  // uint32 g = 2;
  if (this->_internal_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_g(), target);
  }

  // uint32 b = 3;
  if (this->_internal_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_b(), target);
  }

  // uint32 a = 4;
  if (this->_internal_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.PColor)
  return target;
}

size_t PColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.PColor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 r = 1;
  if (this->_internal_r() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_r());
  }

  // uint32 g = 2;
  if (this->_internal_g() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_g());
  }

  // uint32 b = 3;
  if (this->_internal_b() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_b());
  }

  // uint32 a = 4;
  if (this->_internal_a() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PColor::GetClassData() const { return &_class_data_; }


void PColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PColor*>(&to_msg);
  auto& from = static_cast<const PColor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.PColor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_r() != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  if (from._internal_g() != 0) {
    _this->_internal_set_g(from._internal_g());
  }
  if (from._internal_b() != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  if (from._internal_a() != 0) {
    _this->_internal_set_a(from._internal_a());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PColor::CopyFrom(const PColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.PColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PColor::IsInitialized() const {
  return true;
}

void PColor::InternalSwap(PColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PColor, _impl_.a_)
      + sizeof(PColor::_impl_.a_)
      - PROTOBUF_FIELD_OFFSET(PColor, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PColor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PMapInfo_2eproto_getter, &descriptor_table_PMapInfo_2eproto_once,
      file_level_metadata_PMapInfo_2eproto[0]);
}

// ===================================================================

class PTileIndex::_Internal {
 public:
};

PTileIndex::PTileIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.protobuf.PTileIndex)
}
PTileIndex::PTileIndex(const PTileIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PTileIndex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:google.protobuf.PTileIndex)
}

inline void PTileIndex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PTileIndex::~PTileIndex() {
  // @@protoc_insertion_point(destructor:google.protobuf.PTileIndex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PTileIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PTileIndex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PTileIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.PTileIndex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PTileIndex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PTileIndex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.PTileIndex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.PTileIndex)
  return target;
}

size_t PTileIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.PTileIndex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PTileIndex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PTileIndex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PTileIndex::GetClassData() const { return &_class_data_; }


void PTileIndex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PTileIndex*>(&to_msg);
  auto& from = static_cast<const PTileIndex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.PTileIndex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PTileIndex::CopyFrom(const PTileIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.PTileIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTileIndex::IsInitialized() const {
  return true;
}

void PTileIndex::InternalSwap(PTileIndex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PTileIndex, _impl_.y_)
      + sizeof(PTileIndex::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(PTileIndex, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PTileIndex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PMapInfo_2eproto_getter, &descriptor_table_PMapInfo_2eproto_once,
      file_level_metadata_PMapInfo_2eproto[1]);
}

// ===================================================================

class PTileInfo::_Internal {
 public:
  static const ::google::protobuf::PTileIndex& tileindex(const PTileInfo* msg);
};

const ::google::protobuf::PTileIndex&
PTileInfo::_Internal::tileindex(const PTileInfo* msg) {
  return *msg->_impl_.tileindex_;
}
PTileInfo::PTileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.protobuf.PTileInfo)
}
PTileInfo::PTileInfo(const PTileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PTileInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tileindex_){nullptr}
    , decltype(_impl_.sectorid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tileindex()) {
    _this->_impl_.tileindex_ = new ::google::protobuf::PTileIndex(*from._impl_.tileindex_);
  }
  _this->_impl_.sectorid_ = from._impl_.sectorid_;
  // @@protoc_insertion_point(copy_constructor:google.protobuf.PTileInfo)
}

inline void PTileInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tileindex_){nullptr}
    , decltype(_impl_.sectorid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PTileInfo::~PTileInfo() {
  // @@protoc_insertion_point(destructor:google.protobuf.PTileInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PTileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tileindex_;
}

void PTileInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PTileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.PTileInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tileindex_ != nullptr) {
    delete _impl_.tileindex_;
  }
  _impl_.tileindex_ = nullptr;
  _impl_.sectorid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PTileInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.PTileIndex tileindex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tileindex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sectorid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sectorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PTileInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.PTileInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.PTileIndex tileindex = 1;
  if (this->_internal_has_tileindex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tileindex(this),
        _Internal::tileindex(this).GetCachedSize(), target, stream);
  }

  // int32 sectorid = 2;
  if (this->_internal_sectorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sectorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.PTileInfo)
  return target;
}

size_t PTileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.PTileInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.PTileIndex tileindex = 1;
  if (this->_internal_has_tileindex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tileindex_);
  }

  // int32 sectorid = 2;
  if (this->_internal_sectorid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sectorid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PTileInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PTileInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PTileInfo::GetClassData() const { return &_class_data_; }


void PTileInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PTileInfo*>(&to_msg);
  auto& from = static_cast<const PTileInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.PTileInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tileindex()) {
    _this->_internal_mutable_tileindex()->::google::protobuf::PTileIndex::MergeFrom(
        from._internal_tileindex());
  }
  if (from._internal_sectorid() != 0) {
    _this->_internal_set_sectorid(from._internal_sectorid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PTileInfo::CopyFrom(const PTileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.PTileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PTileInfo::IsInitialized() const {
  return true;
}

void PTileInfo::InternalSwap(PTileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PTileInfo, _impl_.sectorid_)
      + sizeof(PTileInfo::_impl_.sectorid_)
      - PROTOBUF_FIELD_OFFSET(PTileInfo, _impl_.tileindex_)>(
          reinterpret_cast<char*>(&_impl_.tileindex_),
          reinterpret_cast<char*>(&other->_impl_.tileindex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PTileInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PMapInfo_2eproto_getter, &descriptor_table_PMapInfo_2eproto_once,
      file_level_metadata_PMapInfo_2eproto[2]);
}

// ===================================================================

class PSectorInfo::_Internal {
 public:
};

PSectorInfo::PSectorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.protobuf.PSectorInfo)
}
PSectorInfo::PSectorInfo(const PSectorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PSectorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sectorid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sectorid_ = from._impl_.sectorid_;
  // @@protoc_insertion_point(copy_constructor:google.protobuf.PSectorInfo)
}

inline void PSectorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sectorid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PSectorInfo::~PSectorInfo() {
  // @@protoc_insertion_point(destructor:google.protobuf.PSectorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PSectorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PSectorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PSectorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.PSectorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sectorid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PSectorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sectorid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sectorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PSectorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.PSectorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sectorid = 1;
  if (this->_internal_sectorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sectorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.PSectorInfo)
  return target;
}

size_t PSectorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.PSectorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 sectorid = 1;
  if (this->_internal_sectorid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sectorid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PSectorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PSectorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PSectorInfo::GetClassData() const { return &_class_data_; }


void PSectorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PSectorInfo*>(&to_msg);
  auto& from = static_cast<const PSectorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.PSectorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sectorid() != 0) {
    _this->_internal_set_sectorid(from._internal_sectorid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PSectorInfo::CopyFrom(const PSectorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.PSectorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSectorInfo::IsInitialized() const {
  return true;
}

void PSectorInfo::InternalSwap(PSectorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sectorid_, other->_impl_.sectorid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PSectorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PMapInfo_2eproto_getter, &descriptor_table_PMapInfo_2eproto_once,
      file_level_metadata_PMapInfo_2eproto[3]);
}

// ===================================================================

class PMapInfo::_Internal {
 public:
};

PMapInfo::PMapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.protobuf.PMapInfo)
}
PMapInfo::PMapInfo(const PMapInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PMapInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tileinfos_){from._impl_.tileinfos_}
    , decltype(_impl_.worldmapsize_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.worldmapsize_ = from._impl_.worldmapsize_;
  // @@protoc_insertion_point(copy_constructor:google.protobuf.PMapInfo)
}

inline void PMapInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tileinfos_){arena}
    , decltype(_impl_.worldmapsize_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PMapInfo::~PMapInfo() {
  // @@protoc_insertion_point(destructor:google.protobuf.PMapInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PMapInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tileinfos_.~RepeatedPtrField();
}

void PMapInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.PMapInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tileinfos_.Clear();
  _impl_.worldmapsize_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PMapInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 worldmapsize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.worldmapsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.PTileInfo tileinfos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tileinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PMapInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.protobuf.PMapInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 worldmapsize = 1;
  if (this->_internal_worldmapsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_worldmapsize(), target);
  }

  // repeated .google.protobuf.PTileInfo tileinfos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tileinfos_size()); i < n; i++) {
    const auto& repfield = this->_internal_tileinfos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.protobuf.PMapInfo)
  return target;
}

size_t PMapInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.PMapInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.PTileInfo tileinfos = 2;
  total_size += 1UL * this->_internal_tileinfos_size();
  for (const auto& msg : this->_impl_.tileinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 worldmapsize = 1;
  if (this->_internal_worldmapsize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_worldmapsize());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PMapInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PMapInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PMapInfo::GetClassData() const { return &_class_data_; }


void PMapInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PMapInfo*>(&to_msg);
  auto& from = static_cast<const PMapInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.PMapInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tileinfos_.MergeFrom(from._impl_.tileinfos_);
  if (from._internal_worldmapsize() != 0) {
    _this->_internal_set_worldmapsize(from._internal_worldmapsize());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PMapInfo::CopyFrom(const PMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.PMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMapInfo::IsInitialized() const {
  return true;
}

void PMapInfo::InternalSwap(PMapInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tileinfos_.InternalSwap(&other->_impl_.tileinfos_);
  swap(_impl_.worldmapsize_, other->_impl_.worldmapsize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PMapInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PMapInfo_2eproto_getter, &descriptor_table_PMapInfo_2eproto_once,
      file_level_metadata_PMapInfo_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::protobuf::PColor*
Arena::CreateMaybeMessage< ::google::protobuf::PColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::protobuf::PColor >(arena);
}
template<> PROTOBUF_NOINLINE ::google::protobuf::PTileIndex*
Arena::CreateMaybeMessage< ::google::protobuf::PTileIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::protobuf::PTileIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::google::protobuf::PTileInfo*
Arena::CreateMaybeMessage< ::google::protobuf::PTileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::protobuf::PTileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::google::protobuf::PSectorInfo*
Arena::CreateMaybeMessage< ::google::protobuf::PSectorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::protobuf::PSectorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::google::protobuf::PMapInfo*
Arena::CreateMaybeMessage< ::google::protobuf::PMapInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::protobuf::PMapInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
