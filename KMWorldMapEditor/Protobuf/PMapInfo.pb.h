// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PMapInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PMapInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PMapInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PMapInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PMapInfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PMapInfo_2eproto;
namespace google {
namespace protobuf {
class PColor;
struct PColorDefaultTypeInternal;
extern PColorDefaultTypeInternal _PColor_default_instance_;
class PMapInfo;
struct PMapInfoDefaultTypeInternal;
extern PMapInfoDefaultTypeInternal _PMapInfo_default_instance_;
class PSectorInfo;
struct PSectorInfoDefaultTypeInternal;
extern PSectorInfoDefaultTypeInternal _PSectorInfo_default_instance_;
class PTileIndex;
struct PTileIndexDefaultTypeInternal;
extern PTileIndexDefaultTypeInternal _PTileIndex_default_instance_;
class PTileInfo;
struct PTileInfoDefaultTypeInternal;
extern PTileInfoDefaultTypeInternal _PTileInfo_default_instance_;
}  // namespace protobuf
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::protobuf::PColor* Arena::CreateMaybeMessage<::google::protobuf::PColor>(Arena*);
template<> ::google::protobuf::PMapInfo* Arena::CreateMaybeMessage<::google::protobuf::PMapInfo>(Arena*);
template<> ::google::protobuf::PSectorInfo* Arena::CreateMaybeMessage<::google::protobuf::PSectorInfo>(Arena*);
template<> ::google::protobuf::PTileIndex* Arena::CreateMaybeMessage<::google::protobuf::PTileIndex>(Arena*);
template<> ::google::protobuf::PTileInfo* Arena::CreateMaybeMessage<::google::protobuf::PTileInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace protobuf {

// ===================================================================

class PColor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.protobuf.PColor) */ {
 public:
  inline PColor() : PColor(nullptr) {}
  ~PColor() override;
  explicit PROTOBUF_CONSTEXPR PColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PColor(const PColor& from);
  PColor(PColor&& from) noexcept
    : PColor() {
    *this = ::std::move(from);
  }

  inline PColor& operator=(const PColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PColor& operator=(PColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PColor* internal_default_instance() {
    return reinterpret_cast<const PColor*>(
               &_PColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PColor& a, PColor& b) {
    a.Swap(&b);
  }
  inline void Swap(PColor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PColor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PColor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PColor& from) {
    PColor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PColor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.protobuf.PColor";
  }
  protected:
  explicit PColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // uint32 r = 1;
  void clear_r();
  uint32_t r() const;
  void set_r(uint32_t value);
  private:
  uint32_t _internal_r() const;
  void _internal_set_r(uint32_t value);
  public:

  // uint32 g = 2;
  void clear_g();
  uint32_t g() const;
  void set_g(uint32_t value);
  private:
  uint32_t _internal_g() const;
  void _internal_set_g(uint32_t value);
  public:

  // uint32 b = 3;
  void clear_b();
  uint32_t b() const;
  void set_b(uint32_t value);
  private:
  uint32_t _internal_b() const;
  void _internal_set_b(uint32_t value);
  public:

  // uint32 a = 4;
  void clear_a();
  uint32_t a() const;
  void set_a(uint32_t value);
  private:
  uint32_t _internal_a() const;
  void _internal_set_a(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.protobuf.PColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t r_;
    uint32_t g_;
    uint32_t b_;
    uint32_t a_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMapInfo_2eproto;
};
// -------------------------------------------------------------------

class PTileIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.protobuf.PTileIndex) */ {
 public:
  inline PTileIndex() : PTileIndex(nullptr) {}
  ~PTileIndex() override;
  explicit PROTOBUF_CONSTEXPR PTileIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PTileIndex(const PTileIndex& from);
  PTileIndex(PTileIndex&& from) noexcept
    : PTileIndex() {
    *this = ::std::move(from);
  }

  inline PTileIndex& operator=(const PTileIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTileIndex& operator=(PTileIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PTileIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const PTileIndex* internal_default_instance() {
    return reinterpret_cast<const PTileIndex*>(
               &_PTileIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PTileIndex& a, PTileIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(PTileIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PTileIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PTileIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PTileIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PTileIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PTileIndex& from) {
    PTileIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTileIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.protobuf.PTileIndex";
  }
  protected:
  explicit PTileIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.protobuf.PTileIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMapInfo_2eproto;
};
// -------------------------------------------------------------------

class PTileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.protobuf.PTileInfo) */ {
 public:
  inline PTileInfo() : PTileInfo(nullptr) {}
  ~PTileInfo() override;
  explicit PROTOBUF_CONSTEXPR PTileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PTileInfo(const PTileInfo& from);
  PTileInfo(PTileInfo&& from) noexcept
    : PTileInfo() {
    *this = ::std::move(from);
  }

  inline PTileInfo& operator=(const PTileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PTileInfo& operator=(PTileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PTileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PTileInfo* internal_default_instance() {
    return reinterpret_cast<const PTileInfo*>(
               &_PTileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PTileInfo& a, PTileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PTileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PTileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PTileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PTileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PTileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PTileInfo& from) {
    PTileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PTileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.protobuf.PTileInfo";
  }
  protected:
  explicit PTileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileindexFieldNumber = 1,
    kSectoridFieldNumber = 2,
  };
  // .google.protobuf.PTileIndex tileindex = 1;
  bool has_tileindex() const;
  private:
  bool _internal_has_tileindex() const;
  public:
  void clear_tileindex();
  const ::google::protobuf::PTileIndex& tileindex() const;
  PROTOBUF_NODISCARD ::google::protobuf::PTileIndex* release_tileindex();
  ::google::protobuf::PTileIndex* mutable_tileindex();
  void set_allocated_tileindex(::google::protobuf::PTileIndex* tileindex);
  private:
  const ::google::protobuf::PTileIndex& _internal_tileindex() const;
  ::google::protobuf::PTileIndex* _internal_mutable_tileindex();
  public:
  void unsafe_arena_set_allocated_tileindex(
      ::google::protobuf::PTileIndex* tileindex);
  ::google::protobuf::PTileIndex* unsafe_arena_release_tileindex();

  // int32 sectorid = 2;
  void clear_sectorid();
  int32_t sectorid() const;
  void set_sectorid(int32_t value);
  private:
  int32_t _internal_sectorid() const;
  void _internal_set_sectorid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.protobuf.PTileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::PTileIndex* tileindex_;
    int32_t sectorid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMapInfo_2eproto;
};
// -------------------------------------------------------------------

class PSectorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.protobuf.PSectorInfo) */ {
 public:
  inline PSectorInfo() : PSectorInfo(nullptr) {}
  ~PSectorInfo() override;
  explicit PROTOBUF_CONSTEXPR PSectorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PSectorInfo(const PSectorInfo& from);
  PSectorInfo(PSectorInfo&& from) noexcept
    : PSectorInfo() {
    *this = ::std::move(from);
  }

  inline PSectorInfo& operator=(const PSectorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PSectorInfo& operator=(PSectorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PSectorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PSectorInfo* internal_default_instance() {
    return reinterpret_cast<const PSectorInfo*>(
               &_PSectorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PSectorInfo& a, PSectorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PSectorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PSectorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PSectorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PSectorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PSectorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PSectorInfo& from) {
    PSectorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PSectorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.protobuf.PSectorInfo";
  }
  protected:
  explicit PSectorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectoridFieldNumber = 1,
  };
  // int32 sectorid = 1;
  void clear_sectorid();
  int32_t sectorid() const;
  void set_sectorid(int32_t value);
  private:
  int32_t _internal_sectorid() const;
  void _internal_set_sectorid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.protobuf.PSectorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t sectorid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMapInfo_2eproto;
};
// -------------------------------------------------------------------

class PMapInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.protobuf.PMapInfo) */ {
 public:
  inline PMapInfo() : PMapInfo(nullptr) {}
  ~PMapInfo() override;
  explicit PROTOBUF_CONSTEXPR PMapInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PMapInfo(const PMapInfo& from);
  PMapInfo(PMapInfo&& from) noexcept
    : PMapInfo() {
    *this = ::std::move(from);
  }

  inline PMapInfo& operator=(const PMapInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMapInfo& operator=(PMapInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PMapInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PMapInfo* internal_default_instance() {
    return reinterpret_cast<const PMapInfo*>(
               &_PMapInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PMapInfo& a, PMapInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PMapInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMapInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PMapInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PMapInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PMapInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PMapInfo& from) {
    PMapInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMapInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.protobuf.PMapInfo";
  }
  protected:
  explicit PMapInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileinfosFieldNumber = 2,
    kWorldmapsizeFieldNumber = 1,
  };
  // repeated .google.protobuf.PTileInfo tileinfos = 2;
  int tileinfos_size() const;
  private:
  int _internal_tileinfos_size() const;
  public:
  void clear_tileinfos();
  ::google::protobuf::PTileInfo* mutable_tileinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::protobuf::PTileInfo >*
      mutable_tileinfos();
  private:
  const ::google::protobuf::PTileInfo& _internal_tileinfos(int index) const;
  ::google::protobuf::PTileInfo* _internal_add_tileinfos();
  public:
  const ::google::protobuf::PTileInfo& tileinfos(int index) const;
  ::google::protobuf::PTileInfo* add_tileinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::protobuf::PTileInfo >&
      tileinfos() const;

  // int32 worldmapsize = 1;
  void clear_worldmapsize();
  int32_t worldmapsize() const;
  void set_worldmapsize(int32_t value);
  private:
  int32_t _internal_worldmapsize() const;
  void _internal_set_worldmapsize(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.protobuf.PMapInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::protobuf::PTileInfo > tileinfos_;
    int32_t worldmapsize_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PMapInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PColor

// uint32 r = 1;
inline void PColor::clear_r() {
  _impl_.r_ = 0u;
}
inline uint32_t PColor::_internal_r() const {
  return _impl_.r_;
}
inline uint32_t PColor::r() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PColor.r)
  return _internal_r();
}
inline void PColor::_internal_set_r(uint32_t value) {
  
  _impl_.r_ = value;
}
inline void PColor::set_r(uint32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:google.protobuf.PColor.r)
}

// uint32 g = 2;
inline void PColor::clear_g() {
  _impl_.g_ = 0u;
}
inline uint32_t PColor::_internal_g() const {
  return _impl_.g_;
}
inline uint32_t PColor::g() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PColor.g)
  return _internal_g();
}
inline void PColor::_internal_set_g(uint32_t value) {
  
  _impl_.g_ = value;
}
inline void PColor::set_g(uint32_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:google.protobuf.PColor.g)
}

// uint32 b = 3;
inline void PColor::clear_b() {
  _impl_.b_ = 0u;
}
inline uint32_t PColor::_internal_b() const {
  return _impl_.b_;
}
inline uint32_t PColor::b() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PColor.b)
  return _internal_b();
}
inline void PColor::_internal_set_b(uint32_t value) {
  
  _impl_.b_ = value;
}
inline void PColor::set_b(uint32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:google.protobuf.PColor.b)
}

// uint32 a = 4;
inline void PColor::clear_a() {
  _impl_.a_ = 0u;
}
inline uint32_t PColor::_internal_a() const {
  return _impl_.a_;
}
inline uint32_t PColor::a() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PColor.a)
  return _internal_a();
}
inline void PColor::_internal_set_a(uint32_t value) {
  
  _impl_.a_ = value;
}
inline void PColor::set_a(uint32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:google.protobuf.PColor.a)
}

// -------------------------------------------------------------------

// PTileIndex

// int32 x = 1;
inline void PTileIndex::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t PTileIndex::_internal_x() const {
  return _impl_.x_;
}
inline int32_t PTileIndex::x() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PTileIndex.x)
  return _internal_x();
}
inline void PTileIndex::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void PTileIndex::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:google.protobuf.PTileIndex.x)
}

// int32 y = 2;
inline void PTileIndex::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t PTileIndex::_internal_y() const {
  return _impl_.y_;
}
inline int32_t PTileIndex::y() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PTileIndex.y)
  return _internal_y();
}
inline void PTileIndex::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void PTileIndex::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:google.protobuf.PTileIndex.y)
}

// -------------------------------------------------------------------

// PTileInfo

// .google.protobuf.PTileIndex tileindex = 1;
inline bool PTileInfo::_internal_has_tileindex() const {
  return this != internal_default_instance() && _impl_.tileindex_ != nullptr;
}
inline bool PTileInfo::has_tileindex() const {
  return _internal_has_tileindex();
}
inline void PTileInfo::clear_tileindex() {
  if (GetArenaForAllocation() == nullptr && _impl_.tileindex_ != nullptr) {
    delete _impl_.tileindex_;
  }
  _impl_.tileindex_ = nullptr;
}
inline const ::google::protobuf::PTileIndex& PTileInfo::_internal_tileindex() const {
  const ::google::protobuf::PTileIndex* p = _impl_.tileindex_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::PTileIndex&>(
      ::google::protobuf::_PTileIndex_default_instance_);
}
inline const ::google::protobuf::PTileIndex& PTileInfo::tileindex() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PTileInfo.tileindex)
  return _internal_tileindex();
}
inline void PTileInfo::unsafe_arena_set_allocated_tileindex(
    ::google::protobuf::PTileIndex* tileindex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tileindex_);
  }
  _impl_.tileindex_ = tileindex;
  if (tileindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.protobuf.PTileInfo.tileindex)
}
inline ::google::protobuf::PTileIndex* PTileInfo::release_tileindex() {
  
  ::google::protobuf::PTileIndex* temp = _impl_.tileindex_;
  _impl_.tileindex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::protobuf::PTileIndex* PTileInfo::unsafe_arena_release_tileindex() {
  // @@protoc_insertion_point(field_release:google.protobuf.PTileInfo.tileindex)
  
  ::google::protobuf::PTileIndex* temp = _impl_.tileindex_;
  _impl_.tileindex_ = nullptr;
  return temp;
}
inline ::google::protobuf::PTileIndex* PTileInfo::_internal_mutable_tileindex() {
  
  if (_impl_.tileindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::PTileIndex>(GetArenaForAllocation());
    _impl_.tileindex_ = p;
  }
  return _impl_.tileindex_;
}
inline ::google::protobuf::PTileIndex* PTileInfo::mutable_tileindex() {
  ::google::protobuf::PTileIndex* _msg = _internal_mutable_tileindex();
  // @@protoc_insertion_point(field_mutable:google.protobuf.PTileInfo.tileindex)
  return _msg;
}
inline void PTileInfo::set_allocated_tileindex(::google::protobuf::PTileIndex* tileindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tileindex_;
  }
  if (tileindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tileindex);
    if (message_arena != submessage_arena) {
      tileindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tileindex, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tileindex_ = tileindex;
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.PTileInfo.tileindex)
}

// int32 sectorid = 2;
inline void PTileInfo::clear_sectorid() {
  _impl_.sectorid_ = 0;
}
inline int32_t PTileInfo::_internal_sectorid() const {
  return _impl_.sectorid_;
}
inline int32_t PTileInfo::sectorid() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PTileInfo.sectorid)
  return _internal_sectorid();
}
inline void PTileInfo::_internal_set_sectorid(int32_t value) {
  
  _impl_.sectorid_ = value;
}
inline void PTileInfo::set_sectorid(int32_t value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:google.protobuf.PTileInfo.sectorid)
}

// -------------------------------------------------------------------

// PSectorInfo

// int32 sectorid = 1;
inline void PSectorInfo::clear_sectorid() {
  _impl_.sectorid_ = 0;
}
inline int32_t PSectorInfo::_internal_sectorid() const {
  return _impl_.sectorid_;
}
inline int32_t PSectorInfo::sectorid() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PSectorInfo.sectorid)
  return _internal_sectorid();
}
inline void PSectorInfo::_internal_set_sectorid(int32_t value) {
  
  _impl_.sectorid_ = value;
}
inline void PSectorInfo::set_sectorid(int32_t value) {
  _internal_set_sectorid(value);
  // @@protoc_insertion_point(field_set:google.protobuf.PSectorInfo.sectorid)
}

// -------------------------------------------------------------------

// PMapInfo

// int32 worldmapsize = 1;
inline void PMapInfo::clear_worldmapsize() {
  _impl_.worldmapsize_ = 0;
}
inline int32_t PMapInfo::_internal_worldmapsize() const {
  return _impl_.worldmapsize_;
}
inline int32_t PMapInfo::worldmapsize() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PMapInfo.worldmapsize)
  return _internal_worldmapsize();
}
inline void PMapInfo::_internal_set_worldmapsize(int32_t value) {
  
  _impl_.worldmapsize_ = value;
}
inline void PMapInfo::set_worldmapsize(int32_t value) {
  _internal_set_worldmapsize(value);
  // @@protoc_insertion_point(field_set:google.protobuf.PMapInfo.worldmapsize)
}

// repeated .google.protobuf.PTileInfo tileinfos = 2;
inline int PMapInfo::_internal_tileinfos_size() const {
  return _impl_.tileinfos_.size();
}
inline int PMapInfo::tileinfos_size() const {
  return _internal_tileinfos_size();
}
inline void PMapInfo::clear_tileinfos() {
  _impl_.tileinfos_.Clear();
}
inline ::google::protobuf::PTileInfo* PMapInfo::mutable_tileinfos(int index) {
  // @@protoc_insertion_point(field_mutable:google.protobuf.PMapInfo.tileinfos)
  return _impl_.tileinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::protobuf::PTileInfo >*
PMapInfo::mutable_tileinfos() {
  // @@protoc_insertion_point(field_mutable_list:google.protobuf.PMapInfo.tileinfos)
  return &_impl_.tileinfos_;
}
inline const ::google::protobuf::PTileInfo& PMapInfo::_internal_tileinfos(int index) const {
  return _impl_.tileinfos_.Get(index);
}
inline const ::google::protobuf::PTileInfo& PMapInfo::tileinfos(int index) const {
  // @@protoc_insertion_point(field_get:google.protobuf.PMapInfo.tileinfos)
  return _internal_tileinfos(index);
}
inline ::google::protobuf::PTileInfo* PMapInfo::_internal_add_tileinfos() {
  return _impl_.tileinfos_.Add();
}
inline ::google::protobuf::PTileInfo* PMapInfo::add_tileinfos() {
  ::google::protobuf::PTileInfo* _add = _internal_add_tileinfos();
  // @@protoc_insertion_point(field_add:google.protobuf.PMapInfo.tileinfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::protobuf::PTileInfo >&
PMapInfo::tileinfos() const {
  // @@protoc_insertion_point(field_list:google.protobuf.PMapInfo.tileinfos)
  return _impl_.tileinfos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PMapInfo_2eproto
